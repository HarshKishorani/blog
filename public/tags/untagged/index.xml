<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Untagged on Harsh Kishorani</title>
    <link>http://localhost:1313/tags/untagged/</link>
    <description>Recent content in Untagged on Harsh Kishorani</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Wed, 24 Apr 2024 21:45:44 +0530</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/untagged/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Deploying Django server on Elastic Bean Stalk with Django Channels Websockets using Elastic Cache Redis and Postgres RDS.</title>
      <link>http://localhost:1313/posts/2024/04/deploying-django-server-on-elastic-bean-stalk-with-django-channels-websockets-using-elastic-cache-redis-and-postgres-rds./</link>
      <pubDate>Wed, 24 Apr 2024 21:45:44 +0530</pubDate>
      <guid>http://localhost:1313/posts/2024/04/deploying-django-server-on-elastic-bean-stalk-with-django-channels-websockets-using-elastic-cache-redis-and-postgres-rds./</guid>
      <description>Deploying a Django server on AWS Elastic Beanstalk can be a daunting task, especially when incorporating real-time functionality with Django Channels Websockets, Elastic Cache Redis, and Postgres RDS. Throughout my journey, I faced numerous challenges and learned a great deal about the intricacies of this process. In this blog, I aim to share my experiences and provide a comprehensive guide to help others navigate this complex deployment. From configuring Django Channels and Redis for real-time communication to setting up Postgres RDS for reliable database management, this guide will cover everything you need to know to successfully deploy your Django application on AWS Elastic Beanstalk.</description>
    </item>
  </channel>
</rss>
