<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Iot on Anubis2 Demo Site</title>
    <link>/tags/iot/</link>
    <description>Anubis2 Demo Site (Iot)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    
      
        <managingEditor>me@junyi.dev
          
            (Junyi)
          
        </managingEditor>
      

      
    

    
    <lastBuildDate>Sun, 14 Apr 2024 20:30:35 +0530</lastBuildDate>
    
    <atom:link href="/tags/iot/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Making an Universal IR remote using ESP32 (Part-1).</title>
      <link>/universal-ir/</link>
      <pubDate>Sun, 14 Apr 2024 20:30:35 +0530</pubDate>
      <author>me@junyi.dev (Junyi)</author>
      <guid>/universal-ir/</guid>
      <description>&lt;h3 id=&#34;we-will-be-using-esp-idf-to-implement-irremoteesp8266-arduino-library-in-esp-idf-to-build-an-ir-remote-repeater&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#we-will-be-using-esp-idf-to-implement-irremoteesp8266-arduino-library-in-esp-idf-to-build-an-ir-remote-repeater&#34;&gt;
        ##
    &lt;/a&gt;
    We will be using esp idf to implement IRremoteesp8266 Arduino Library in esp-idf to build an IR remote repeater.
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/crankyoldgit/IRremoteESP8266&#34;&gt;&lt;strong&gt;IRremoteESP8266&lt;/strong&gt;&lt;/a&gt; is an Arduino Framework which can be used to &lt;strong&gt;send and receive&lt;/strong&gt; infra-red signals on an &lt;strong&gt;ESP8266&lt;/strong&gt; or an &lt;strong&gt;ESP32&lt;/strong&gt; using common 940nm IR LEDs and common IR receiver modules. e.g. TSOP{17,22,24,36,38,44,48}* demodulators etc.&lt;/p&gt;
&lt;p&gt;Firstly we will learn how to implement this Arduino Framework into ESP-IDF.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(Note : You can implement any Arduino Library or Framework in ESP_IDF using this approach. We won&amp;rsquo;t we using Platform-IO to do this step, although you can try that approach too.)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So, to implement &lt;a href=&#34;https://github.com/crankyoldgit/IRremoteESP8266&#34;&gt;&lt;strong&gt;IRremoteESP8266&lt;/strong&gt;&lt;/a&gt; Arduino Library into esp-idf (not using Platform-IO) first we will need to import the arduino-esp32 library as a component in our esp-idf project.&lt;/p&gt;
&lt;p&gt;Follow the following steps to add arduino-esp32 library as your global component for your esp-idf projects.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to your &lt;code&gt;esp-idf/components&lt;/code&gt; directory in your terminal.&lt;/li&gt;
&lt;li&gt;Run the following commands:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git clone https://github.com/espressif/arduino-esp32.git arduino&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd arduino&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git submodule update --init --recursive&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You have successfully added arduino-esp32 library as your idf component.
Now, create a new idf project in vscode using the sample project template.&lt;/p&gt;
&lt;p&gt;Change your &lt;em&gt;main.c&lt;/em&gt; file to &lt;em&gt;main.cpp&lt;/em&gt; in your &lt;code&gt;main&lt;/code&gt; folder and also update your &lt;code&gt;idf_component_register&lt;/code&gt; in &lt;code&gt;main/CmakeLists.txt&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s test out the arduino library. Paste the following code into your &lt;code&gt;main.cpp&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;(Note : In &lt;code&gt;sdkconfig.defaults&lt;/code&gt; of project set &lt;code&gt;CONFIG_FREERTOS_HZ=1000&lt;/code&gt;.)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;#34;Arduino.h&amp;#34;


extern &amp;#34;C&amp;#34; void app_main()
{
  initArduino();


  // Arduino-like setup()
  Serial.begin(115200);
  while(!Serial){
    ; // wait for serial port to connect
  }


  // Arduino-like loop()
  while(true){
    Serial.println(&amp;#34;loop&amp;#34;);
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now you can similarly create a separate idf component for the &lt;strong&gt;IRremoteESP8266&lt;/strong&gt; library, but I will be copying the source code of the library and importing it in my project.&lt;/p&gt;
&lt;p&gt;I will copy the &lt;code&gt;src&lt;/code&gt; folder from &lt;a href=&#34;https://github.com/crankyoldgit/IRremoteESP8266&#34;&gt;&lt;strong&gt;IRremoteESP8266&lt;/strong&gt;&lt;/a&gt; folder and paste it in &lt;code&gt;main\&lt;/code&gt;. And update the &lt;code&gt;main/CmakeLists.txt&lt;/code&gt; as following.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Define where the source files are located
set(SOURCE_DIR &amp;#34;${CMAKE_CURRENT_LIST_DIR}/src&amp;#34;)


# Collect all .cpp source files from the source directory
file(GLOB_RECURSE SOURCE_FILES &amp;#34;${SOURCE_DIR}/*.cpp&amp;#34;)


idf_component_register(SRCS &amp;#34;main.cpp&amp;#34; ${SOURCE_FILES}
                    INCLUDE_DIRS &amp;#34;.&amp;#34; ${SOURCE_DIR}
                    REQUIRES &amp;#34;arduino&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;your-project-structure-will-look-like-this&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#your-project-structure-will-look-like-this&#34;&gt;
        ##
    &lt;/a&gt;
    Your Project structure will look like this:
&lt;/div&gt;
&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;.
├── build                  
├── main                    
      ├── src    # IRremoteESP8266 source files.
      ├── main.cpp
      ├── CmakeLists.txt              
├── CmakeLists.txt                    
├── sdkconfig                  
├── sdkconfig.defaults
└── README.md
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our Library is successfully added to the IDF environment. Copy the following code IR repeater code in the &lt;code&gt;main.cpp&lt;/code&gt; of the project. This code captures the incoming IR signal and retransmits it back using the transmitter.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(Note : I will be using an ESP32 development board and an IR receiver and transmitter at GPIO 18 and 19 respectively.)&lt;/em&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;#34;Arduino.h&amp;#34;
#include &amp;#34;src/IRrecv.h&amp;#34;
#include &amp;#34;src/IRsend.h&amp;#34;
#include &amp;#34;IRutils.h&amp;#34;


const uint16_t kRecvPin = 18;
const uint16_t kIrLedPin = 19;


// The Serial connection baud rate.
const uint32_t kBaudRate = 115200;


// As this program is a special purpose capture/resender, let&amp;#39;s use a larger
// than expected buffer so we can handle very large IR messages.
const uint16_t kCaptureBufferSize = 1024; // 1024 == ~511 bits


// kTimeout is the Nr. of milli-Seconds of no-more-data before we consider a
// message ended.
const uint8_t kTimeout = 50; // Milli-Seconds


// kFrequency is the modulation frequency all UNKNOWN messages will be sent at.
const uint16_t kFrequency = 38000; // in Hz. e.g. 38kHz.


// The IR transmitter.
IRsend irsend(kIrLedPin);
// The IR receiver.
IRrecv irrecv(kRecvPin, kCaptureBufferSize, kTimeout, false);
// Somewhere to store the captured message.
decode_results results;


extern &amp;#34;C&amp;#34; void app_main()
{
  initArduino();


  irrecv.enableIRIn(); // Start up the IR receiver.
  irsend.begin();      // Start up the IR sender.


  Serial.begin(kBaudRate);
  while (!Serial) // Wait for the serial connection to be establised.
    delay(50);
  Serial.println();


  Serial.print(&amp;#34;SmartIRRepeater is now running and waiting for IR input &amp;#34;
               &amp;#34;on Pin &amp;#34;);
  Serial.println(kRecvPin);
  Serial.print(&amp;#34;and will retransmit it on Pin &amp;#34;);
  Serial.println(kIrLedPin);


  while (true)
  {
    // Check if an IR message has been received.
    if (irrecv.decode(&amp;amp;results))
    { // We have captured something.
      // The capture has stopped at this point.
      decode_type_t protocol = results.decode_type;
      uint16_t size = results.bits;
      bool success = true;
      // Is it a protocol we don&amp;#39;t understand?
      if (protocol == decode_type_t::UNKNOWN)
      { // Yes.
        // Convert the results into an array suitable for sendRaw().
        // resultToRawArray() allocates the memory we need for the array.
        uint16_t *raw_array = resultToRawArray(&amp;amp;results);
        // Find out how many elements are in the array.
        size = getCorrectedRawLength(&amp;amp;results);
#if SEND_RAW
        // Send it out via the IR LED circuit.
        irsend.sendRaw(raw_array, size, kFrequency);
#endif // SEND_RAW
        // Deallocate the memory allocated by resultToRawArray().
        delete[] raw_array;
      }
      else if (hasACState(protocol))
      { // Does the message require a state[]?
        // It does, so send with bytes instead.
        success = irsend.send(protocol, results.state, size / 8);
      }
      else
      { // Anything else must be a simple message protocol. ie. &amp;lt;= 64 bits
        success = irsend.send(protocol, results.value, size);
      }
      // Resume capturing IR messages. It was not restarted until after we sent
      // the message so we didn&amp;#39;t capture our own message.
      irrecv.resume();


      // Display a crude timestamp &amp;amp; notification.
      uint32_t now = millis();
      Serial.printf(
          &amp;#34;%06lu.%03lu: A %d-bit %s message was %ssuccessfully retransmitted.\n&amp;#34;,
          now / 1000, now % 1000, size, typeToString(protocol).c_str(),
          success ? &amp;#34;&amp;#34; : &amp;#34;un&amp;#34;);
    }
    yield(); // Or delay(milliseconds); This ensures the ESP doesn&amp;#39;t WDT reset.
  }
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>
