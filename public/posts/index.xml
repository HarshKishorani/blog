<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Harsh Kishorani</title>
        <link>https://harshkishorani.github.io/posts/</link>
        <description>Recent content in Posts on Harsh Kishorani</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
        <lastBuildDate>Sun, 14 Apr 2024 20:30:35 +0530</lastBuildDate>
        <atom:link href="https://harshkishorani.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Making an Universal IR remote using ESP32 (Part-1).</title>
            <link>https://harshkishorani.github.io/universal-ir/</link>
            <pubDate>Sun, 14 Apr 2024 20:30:35 +0530</pubDate>
            
            <guid>https://harshkishorani.github.io/universal-ir/</guid>
            <description>&lt;h3 id=&#34;we-will-be-using-esp-idf-to-implement-irremoteesp8266-arduino-library-in-esp-idf-to-build-an-ir-remote-repeater&#34;&gt;We will be using esp idf to implement IRremoteesp8266 Arduino Library in esp-idf to build an IR remote repeater.&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/crankyoldgit/IRremoteESP8266&#34;&gt;&lt;strong&gt;IRremoteESP8266&lt;/strong&gt;&lt;/a&gt; is an Arduino Framework which can be used to &lt;strong&gt;send and receive&lt;/strong&gt; infra-red signals on an &lt;strong&gt;ESP8266&lt;/strong&gt; or an &lt;strong&gt;ESP32&lt;/strong&gt; using common 940nm IR LEDs and common IR receiver modules. e.g. TSOP{17,22,24,36,38,44,48}* demodulators etc.&lt;/p&gt;
&lt;p&gt;Firstly we will learn how to implement this Arduino Framework into ESP-IDF.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(Note : You can implement any Arduino Library or Framework in ESP_IDF using this approach. We won&amp;rsquo;t we using Platform-IO to do this step, although you can try that approach too.)&lt;/em&gt;&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h3 id="we-will-be-using-esp-idf-to-implement-irremoteesp8266-arduino-library-in-esp-idf-to-build-an-ir-remote-repeater">We will be using esp idf to implement IRremoteesp8266 Arduino Library in esp-idf to build an IR remote repeater.</h3>
<p>The <a href="https://github.com/crankyoldgit/IRremoteESP8266"><strong>IRremoteESP8266</strong></a> is an Arduino Framework which can be used to <strong>send and receive</strong> infra-red signals on an <strong>ESP8266</strong> or an <strong>ESP32</strong> using common 940nm IR LEDs and common IR receiver modules. e.g. TSOP{17,22,24,36,38,44,48}* demodulators etc.</p>
<p>Firstly we will learn how to implement this Arduino Framework into ESP-IDF.</p>
<p><em>(Note : You can implement any Arduino Library or Framework in ESP_IDF using this approach. We won&rsquo;t we using Platform-IO to do this step, although you can try that approach too.)</em></p>
<p>So, to implement <a href="https://github.com/crankyoldgit/IRremoteESP8266"><strong>IRremoteESP8266</strong></a> Arduino Library into esp-idf (not using Platform-IO) first we will need to import the arduino-esp32 library as a component in our esp-idf project.</p>
<p>Follow the following steps to add arduino-esp32 library as your global component for your esp-idf projects.</p>
<ol>
<li>Go to your <code>esp-idf/components</code> directory in your terminal.</li>
<li>Run the following commands:</li>
</ol>
<ul>
<li><code>git clone https://github.com/espressif/arduino-esp32.git arduino</code></li>
<li><code>cd arduino</code></li>
<li><code>git submodule update --init --recursive</code></li>
</ul>
<p>You have successfully added arduino-esp32 library as your idf component.
Now, create a new idf project in vscode using the sample project template.</p>
<p>Change your <em>main.c</em> file to <em>main.cpp</em> in your <code>main</code> folder and also update your <code>idf_component_register</code> in <code>main/CmakeLists.txt</code>.</p>
<p>Let&rsquo;s test out the arduino library. Paste the following code into your <code>main.cpp</code>.</p>
<p>(Note : In <code>sdkconfig.defaults</code> of project set <code>CONFIG_FREERTOS_HZ=1000</code>.)</p>
<pre tabindex="0"><code>#include &#34;Arduino.h&#34;


extern &#34;C&#34; void app_main()
{
  initArduino();


  // Arduino-like setup()
  Serial.begin(115200);
  while(!Serial){
    ; // wait for serial port to connect
  }


  // Arduino-like loop()
  while(true){
    Serial.println(&#34;loop&#34;);
  }
}
</code></pre><p>Now you can similarly create a separate idf component for the <strong>IRremoteESP8266</strong> library, but I will be copying the source code of the library and importing it in my project.</p>
<p>I will copy the <code>src</code> folder from <a href="https://github.com/crankyoldgit/IRremoteESP8266"><strong>IRremoteESP8266</strong></a> folder and paste it in <code>main\</code>. And update the <code>main/CmakeLists.txt</code> as following.</p>
<pre tabindex="0"><code># Define where the source files are located
set(SOURCE_DIR &#34;${CMAKE_CURRENT_LIST_DIR}/src&#34;)


# Collect all .cpp source files from the source directory
file(GLOB_RECURSE SOURCE_FILES &#34;${SOURCE_DIR}/*.cpp&#34;)


idf_component_register(SRCS &#34;main.cpp&#34; ${SOURCE_FILES}
                    INCLUDE_DIRS &#34;.&#34; ${SOURCE_DIR}
                    REQUIRES &#34;arduino&#34;)
</code></pre><h3 id="your-project-structure-will-look-like-this">Your Project structure will look like this:</h3>
<pre><code>.
├── build                  
├── main                    
      ├── src    # IRremoteESP8266 source files.
      ├── main.cpp
      ├── CmakeLists.txt              
├── CmakeLists.txt                    
├── sdkconfig                  
├── sdkconfig.defaults
└── README.md
</code></pre>
<p>Our Library is successfully added to the IDF environment. Copy the following code IR repeater code in the <code>main.cpp</code> of the project. This code captures the incoming IR signal and retransmits it back using the transmitter.</p>
<p><em>(Note : I will be using an ESP32 development board and an IR receiver and transmitter at GPIO 18 and 19 respectively.)</em></p>
<pre tabindex="0"><code>#include &#34;Arduino.h&#34;
#include &#34;src/IRrecv.h&#34;
#include &#34;src/IRsend.h&#34;
#include &#34;IRutils.h&#34;


const uint16_t kRecvPin = 18;
const uint16_t kIrLedPin = 19;


// The Serial connection baud rate.
const uint32_t kBaudRate = 115200;


// As this program is a special purpose capture/resender, let&#39;s use a larger
// than expected buffer so we can handle very large IR messages.
const uint16_t kCaptureBufferSize = 1024; // 1024 == ~511 bits


// kTimeout is the Nr. of milli-Seconds of no-more-data before we consider a
// message ended.
const uint8_t kTimeout = 50; // Milli-Seconds


// kFrequency is the modulation frequency all UNKNOWN messages will be sent at.
const uint16_t kFrequency = 38000; // in Hz. e.g. 38kHz.


// The IR transmitter.
IRsend irsend(kIrLedPin);
// The IR receiver.
IRrecv irrecv(kRecvPin, kCaptureBufferSize, kTimeout, false);
// Somewhere to store the captured message.
decode_results results;


extern &#34;C&#34; void app_main()
{
  initArduino();


  irrecv.enableIRIn(); // Start up the IR receiver.
  irsend.begin();      // Start up the IR sender.


  Serial.begin(kBaudRate);
  while (!Serial) // Wait for the serial connection to be establised.
    delay(50);
  Serial.println();


  Serial.print(&#34;SmartIRRepeater is now running and waiting for IR input &#34;
               &#34;on Pin &#34;);
  Serial.println(kRecvPin);
  Serial.print(&#34;and will retransmit it on Pin &#34;);
  Serial.println(kIrLedPin);


  while (true)
  {
    // Check if an IR message has been received.
    if (irrecv.decode(&amp;results))
    { // We have captured something.
      // The capture has stopped at this point.
      decode_type_t protocol = results.decode_type;
      uint16_t size = results.bits;
      bool success = true;
      // Is it a protocol we don&#39;t understand?
      if (protocol == decode_type_t::UNKNOWN)
      { // Yes.
        // Convert the results into an array suitable for sendRaw().
        // resultToRawArray() allocates the memory we need for the array.
        uint16_t *raw_array = resultToRawArray(&amp;results);
        // Find out how many elements are in the array.
        size = getCorrectedRawLength(&amp;results);
#if SEND_RAW
        // Send it out via the IR LED circuit.
        irsend.sendRaw(raw_array, size, kFrequency);
#endif // SEND_RAW
        // Deallocate the memory allocated by resultToRawArray().
        delete[] raw_array;
      }
      else if (hasACState(protocol))
      { // Does the message require a state[]?
        // It does, so send with bytes instead.
        success = irsend.send(protocol, results.state, size / 8);
      }
      else
      { // Anything else must be a simple message protocol. ie. &lt;= 64 bits
        success = irsend.send(protocol, results.value, size);
      }
      // Resume capturing IR messages. It was not restarted until after we sent
      // the message so we didn&#39;t capture our own message.
      irrecv.resume();


      // Display a crude timestamp &amp; notification.
      uint32_t now = millis();
      Serial.printf(
          &#34;%06lu.%03lu: A %d-bit %s message was %ssuccessfully retransmitted.\n&#34;,
          now / 1000, now % 1000, size, typeToString(protocol).c_str(),
          success ? &#34;&#34; : &#34;un&#34;);
    }
    yield(); // Or delay(milliseconds); This ensures the ESP doesn&#39;t WDT reset.
  }
}
</code></pre>]]></content>
        </item>
        
    </channel>
</rss>
